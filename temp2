//angular.module('todoappApp')
app.directive('forceFieldChart', function () {
   return {
      restrict: 'EA',//E = element, A = attribute, C = class, M = comment  
      template: '<div></div>',
      link: function ($scope, element, attrs) {
      
        var width = '100%',
                height = 400,
                color = d3.scale.category20(),
                countOfVisionElements = 0,
                visionElementIds = [],
                countOfGoalElements = 0,
                goalElementIds = [], 
                radian = 0,
                deg2rad = Math.PI/180,
                rad2deg = 180/Math,
                PIcanvasHeightPx, canvasWidthPx;

        var svg = d3.select(".forceFieldChart").append("svg")
                .attr("width", width)
                .attr("height", height)
                .attr("class", "mysvg").style("background-color", "lightyellow");
           
        canvasWidthPx   =   $(".mysvg").width();
        canvasHeightPx  =   $(".mysvg").height();
        var a = canvasWidthPx/2.05;
        var b = canvasHeightPx/2.05; 
        var myTempData = $scope.todoData;  
        for(var i=0;i<myTempData.nodes.length;i++){
            for(var j=0;j<myTempData.links.length;j++){
                if (myTempData.links[j].sourceRefId == myTempData.nodes[i].id) myTempData.links[j].source=i;
                if (myTempData.links[j].targetRefId == myTempData.nodes[i].id) myTempData.links[j].target=i; 
            }
            if (myTempData.nodes[i].fixed == true && $scope.todoData.nodes[i].name == "ROOT")
            {
                myTempData.nodes[i].x = canvasWidthPx/2;
                myTempData.nodes[i].y = canvasHeightPx/2;
            } 
            if (myTempData.nodes[i].fixed == true && myTempData.nodes[i].type == "VISION")
            {
                countOfVisionElements++; 
                visionElementIds[visionElementIds.length] = myTempData.nodes[i].id;
            } 
            else if ($scope.todoData.nodes[i].fixed == true && myTempData.nodes[i].type == "GOAL")
            {
                countOfGoalElements++; 
                goalElementIds[goalElementIds.length] = myTempData.nodes[i].id;
            }
        }
        
        console.log(countOfVisionElements, visionElementIds);
        console.log(countOfGoalElements, goalElementIds);  
        
        var elipse1 = svg.append("ellipse").attr("cx", canvasWidthPx/2).attr("cy", canvasHeightPx/2).attr("rx", a).attr("ry", b)
                                 .style("fill", "darkgrey").style("stroke-width","1").style("stroke", "black");
        var rectangle = svg.append("ellipse").attr("cx", canvasWidthPx/2).attr("cy", canvasHeightPx/2)
                        .attr("rx", a*.85).attr("ry", b*.85)
                        .style("fill", "lightgrey").style("stroke-width","1").style("stroke", "grey");  
            
          $scope.todoData = myTempData;
          $scope.$watch('todoData', function (todoData) {            
                for(var i=0;i<visionElementIds.length;i++){
                    var tanRad = Math.tan(radian);
                   
                    if ( (radian >= 0 && radian < deg2rad*90) || (radian > deg2rad*270 && radian <= deg2rad*360))
                    {
                        $scope.todoData.nodes[visionElementIds[i]].x = canvasWidthPx/2 +
                                                                (a*b)/(Math.sqrt( (b*b)+(a*a*tanRad*tanRad)));
                        $scope.todoData.nodes[visionElementIds[i]].y = canvasHeightPx/2 +
                                                                (a*b*tanRad)/(Math.sqrt( (b*b)+(a*a*tanRad*tanRad)));
                    }
                    else{
                        $scope.todoData.nodes[visionElementIds[i]].x = canvasWidthPx/2 -
                                                                (a*b)/(Math.sqrt( (b*b)+(a*a*tanRad*tanRad)));;
                        $scope.todoData.nodes[visionElementIds[i]].y = canvasHeightPx/2 -
                                                                (a*b*tanRad)/(Math.sqrt( (b*b)+(a*a*tanRad*tanRad)));
                    }
                    radian += (2*Math.PI)/countOfVisionElements;
                    console.log(radian);
                }

                a=a*.85;
                b=b*.85;
                for(var i=0;i<goalElementIds.length;i++)
                {
                    var tanRad = Math.tan(radian);                  
                    if ( (radian >= 0 && radian < deg2rad*90) || (radian > deg2rad*270 && radian <= deg2rad*360))
                    {
                        $scope.todoData.nodes[goalElementIds[i]].x = canvasWidthPx/2 +
                                                                (a*b)/(Math.sqrt( (b*b)+(a*a*tanRad*tanRad)));
                        $scope.todoData.nodes[goalElementIds[i]].y = canvasHeightPx/2 +
                                                                (a*b*tanRad)/(Math.sqrt( (b*b)+(a*a*tanRad*tanRad)));
                    }
                    else{
                        $scope.todoData.nodes[goalElementIds[i]].x = canvasWidthPx/2 -
                                                                (a*b)/(Math.sqrt( (b*b)+(a*a*tanRad*tanRad)));;
                        $scope.todoData.nodes[goalElementIds[i]].y = canvasHeightPx/2 -
                                                                (a*b*tanRad)/(Math.sqrt( (b*b)+(a*a*tanRad*tanRad)));
                    }
                    radian += (2*Math.PI)/countOfGoalElements;
                    console.log(radian);
                }
                var force = d3.layout.force()
                            .charge(-120)
                            .linkDistance(30)
                            .size([$(".mysvg").width(), height])
                            .nodes($scope.todoData.nodes)
                            .links($scope.todoData.links)
                            .start();
                
                var link = svg.selectAll(".link")
                    .data($scope.todoData.links)
                    .enter().append("line")
                    .attr("class", "link")
                    .style("stroke-width", function(d) { return Math.sqrt(d.value); })
                    .style("stroke", function(d) {
                        //if(d.color !== null) {
                        //    return d.color;
                        //} else return 'red';
                        return 'red';
                    });

                var node = svg.selectAll(".node")
                            .data($scope.todoData.nodes)
                            .enter().append("circle")
                            .attr("class", "node")
                            .attr("r", 5)
                            .style("fill", function(d) { return color(d.group); })
                            .call(force.drag)
                            .on('click', function(d) {
                                //scope.currentToDo.id = d.id;
                                //scope.currentToDo.status = d.status;
                                //scope.currentToDo.title = d.name;"This is a new test";//});
                                //scope.currentToDo.description = d.name;
                                //scope.$apply();
                                //$('#todoModal2').modal('show');
                                $scope.removeTodo(d.id);
                                $scope.$apply();
                            });
                //node.append("title").text(function(d) { return d.name; });
                
                force.on("tick", function() 
                {
                    link.attr("x1", function(d) { return d.source.x; })
                        .attr("y1", function(d) { return d.source.y; })
                        .attr("x2", function(d) { return d.target.x; })
                        .attr("y2", function(d) { return d.target.y; });

                    node.attr("cx", function(d) { return d.x; })
                        .attr("cy", function(d) { return d.y; });
                });
                console.log ("watch triggered");
            });
      
      
      
      
      
      
      
      
      
      
      
      }         
   }
});

